Javascript notes


==== Strings === 

toString - var strNum = num.toString()
Number = var num = Number(numStr)



Arrays

Array.from() - The Array.from() static method creates a new, shallow-copied Array instance from an array-like or iterable object.

Array.isArray()

Array.of()

Array.prototype.concat() - ans = ans.concat(arr[i]);
Array.prototype.copyWithin()
Array.prototype.entries()
Array.prototype.every()
Array.prototype.fill()
Array.prototype.filter()
Array.prototype.find()
Array.prototype.findIndex()
Array.prototype.flat()
Array.prototype.flatMap()
Array.prototype.forEach() - Loop over an Array
Array.prototype.includes()
Array.prototype.indexOf()
Array.prototype.join()
Array.prototype.keys()
Array.prototype.lastIndexOf()
Array.prototype.map()
Array.prototype.pop() - Remove an item from the end of an Array
Array.prototype.push() - Add an item to the end of an Array
Array.prototype.reduce()
Array.prototype.reduceRight()
Array.prototype.reverse()
Array.prototype.shift() - Remove an item from the beginning of an Array
Array.prototype.unshift() - Add an item to the beginning of an Array
Array.prototype.slice()
Array.prototype.some()
Array.prototype.sort()
Array.prototype.splice()
Array.prototype.toLocaleString()
Array.prototype.toSource()
Array.prototype.toString()
Array.prototype.values()
Array.prototype[@@iterator]()
get Array[@@species]

=== check existance of element in array ====
    if(agentList.indexOf(agentToSearchFor) > -1 ){
        return agentToSearchFor+' is present within Agent list';
    }

==== nested arrays ====
unshift - place at front of the array
var nestedArray = [ [1, 2, 3], [4, 5, 6], [/*we want 7 here*/8, 9] ];
nestedArray[2].unshift(7)



===== objects =====
objects = anObj = {key:value, key:value} 
Object.keys(anObj) - returns an array of the objects keys
Object.values(anObj) - returns an array of the objects values
delete obj[key]

looping with 'in' 
for(element in object){ //element is a key 
        console.log(object[element]);
    }
nested
    for(element in nestedObject){
        for(innerElement in nestedObject[element]){
            console.log(nestedObject[element][innerElement]);
        }
    }
==== nested objects ====
Array.isArray(inputObj[key])
Object.keys(obj[key])

delete arrayOfObjects[index][key];



